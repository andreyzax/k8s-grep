#!/usr/bin/env python3
"""
Wrapper to execute Kustomize command and grep matching objects.
Example usage:
`./kustomize-grep -o dev -g console` will output all objects cotaining the word mgmt in their name
`./kustomize-grep -o dev -g console -g gateway` will output all objects cotaining the word 'gateway' or 'console' in their name
`./kustomize-grep -o dev -g console -k service` will output all objects cotaining the word 'console' and contain 'service' in their kind

You can also pipe the output into kubectl:
`./kustomize-grep -o dev -g console | kubectl diff -f -`
"""

from argparse import ArgumentParser
from subprocess import Popen, PIPE
import shlex
import yaml


def run_command_validate(command):
    try:
        p = Popen(shlex.split(command), stdout=PIPE,
                stderr=PIPE, universal_newlines=True)
        out, err = p.communicate()
        if p.returncode != 0:
            print(
                f"ERROR - command: {command} returned a non exit-code status or stderr is not empty!\n")
            print(f"exit code: {p.returncode}, stderr: {err}")
            exit(1)
        return(out)
    except Exception as e:
        print(e.message)
        exit(1)


parser = ArgumentParser(usage='%(prog)s [options]')
parser.add_argument("-g","--grep", action="append", dest="grep", default=None,
                    help="grep expression - can be passed multiple times")
parser.add_argument("-k", "--kind", action="append", dest="kind", default=None,
                    help="filter by kind - can be passed multiple times")
parser.add_argument("-o", "--overlay", action="store", dest="overlay", default=None,
                    required=True, help="overlay name to build")
args = parser.parse_args()


kustomize_out = run_command_validate(f'kustomize build overlays/{args.overlay}')
k8s_objects = yaml.safe_load_all(kustomize_out)
matches = []
for o in k8s_objects:
    if not ('kind' in o and 'metadata' in o and 'name' in o['metadata']):
        print(f'Error in object {0}\nCould not find kind or metadata.name field!')
        exit(1)
    match = True
    if args.kind is not None:
        if not any(k for k in args.kind if k.lower() in o['kind'].lower()):
            match = False

    if args.grep is not None:
        if not any(k for k in args.grep if k.lower() in o['metadata']['name'].lower()):
            match = False
    if match:
        matches.append(o)

print(yaml.safe_dump_all(matches))
